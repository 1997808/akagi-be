// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          Int          @id @default(autoincrement())
  email       String       @unique
  username    String
  password    String
  avatar      String?
  verifyToken String?
  verify      Boolean      @default(false)
  userFriends Friendship[] @relation(name: "user")
  friends     Friendship[] @relation(name: "friend")
  members     Member[]
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @default(now()) @updatedAt
}

model Friendship {
  id        Int      @id @default(autoincrement())
  type      Int
  userId    Int
  user      User     @relation(name: "user", fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  friendId  Int
  friend    User     @relation(name: "friend", fields: [friendId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  createdAt DateTime @default(now())
}

model Group {
  id            Int       @id @default(autoincrement())
  name          String?   @default("Default")
  description   String?   @default("A public group open for anyone")
  iconURL       String?
  bannerURL     String?
  type          GroupType @default(GROUP)
  isPublic      Boolean   @default(false)
  memberOwnerId Int?      @unique
  memberOwner   Member?   @relation(name: "owner", fields: [memberOwnerId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  channels      Channel[]
  members       Member[]  @relation(name: "groupMember")
  memberCount   Int       @default(0)
  roles         Role[]
  invites       Invite[]
  createdAt     DateTime  @default(now())
}

model Member {
  id         Int              @id @default(autoincrement())
  userId     Int
  user       User             @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  groupId    Int
  group      Group            @relation(name: "groupMember", fields: [groupId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  groupOwner Group?           @relation(name: "owner")
  status     MemberStatus     @default(IN)
  messages   Message[]
  roles      RolesOnMembers[]
  invites    Invite[]
  createdAt  DateTime         @default(now())
}

model Role {
  id          Int              @id @default(autoincrement())
  name        String
  permissions Int[]            @default([])
  groupId     Int
  group       Group            @relation(fields: [groupId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  members     RolesOnMembers[]
  createdAt   DateTime         @default(now())
}

model RolesOnMembers {
  id         Int      @id @default(autoincrement())
  member     Member   @relation(fields: [memberId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  memberId   Int
  role       Role     @relation(fields: [roleId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  roleId     Int
  assignedAt DateTime @default(now())
  // assignedBy String

  @@unique([memberId, roleId])
}

model Channel {
  id             Int          @id @default(autoincrement())
  name           String       @default("general")
  firstMessageId Int?
  lastMessageId  Int?
  // position    Int show in ui
  type           ChannelType  @default(TEXT)
  description    String?
  groupId        Int
  group          Group        @relation(fields: [groupId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  messages       Message[]
  createdAt      DateTime     @default(now())
  pinMessages    PinMessage[]
}

model Message {
  id           Int         @id @default(autoincrement())
  content      String?
  image        String?
  channelId    Int
  channel      Channel     @relation(fields: [channelId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  memberId     Int
  member       Member      @relation(fields: [memberId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  pinMessageId Int?
  pinMessage   PinMessage?
}

model PinMessage {
  id        Int      @id @default(autoincrement())
  channelId Int
  channel   Channel  @relation(fields: [channelId], references: [id])
  messageId Int      @unique
  message   Message  @relation(fields: [messageId], references: [id])
  createdAt DateTime @default(now())

  @@unique([channelId, messageId])
}

model Invite {
  id                Int      @id @default(autoincrement())
  uses              Int      @default(0)
  maxUses           Int      @default(1)
  token             String   @unique
  createdByMemberId Int
  createdByMember   Member   @relation(fields: [createdByMemberId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  // expireDate DateTime
  groupId           Int
  group             Group    @relation(fields: [groupId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  createdAt         DateTime @default(now())
}

// enum FriendshipType {
//   FRIEND: 1
//   OUTGOING: 2
//   INCOMING: 3
//   CANCEL: 4
//   BLOCK: 5
// }

enum MemberStatus {
  IN
  OUT
  DELETE
}

enum GroupType {
  DIRECT
  GROUP
}

enum ChannelType {
  TEXT
  VOICE
}
