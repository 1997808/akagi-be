// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          Int          @id @default(autoincrement())
  email       String       @unique
  username    String
  password    String
  verifyToken String?
  verify      Boolean      @default(false)
  userFriends Friendship[] @relation(name: "user")
  friends     Friendship[] @relation(name: "friend")
  members     Member[]
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @default(now()) @updatedAt
}

model Friendship {
  id        Int      @id @default(autoincrement())
  type      Int
  userId    Int
  user      User     @relation(name: "user", fields: [userId], references: [id])
  friendId  Int
  friend    User     @relation(name: "friend", fields: [friendId], references: [id])
  createdAt DateTime @default(now())
}

model Group {
  id        Int       @id @default(autoincrement())
  name      String
  iconURL   String?
  // ownerId        String
  channel   Channel[]
  members   Member[]
  roles     Role[]
  invites   Invite[]
  createdAt DateTime  @default(now())
}

model Member {
  id        Int              @id @default(autoincrement())
  userId    Int
  user      User             @relation(fields: [userId], references: [id])
  groupId   Int
  group     Group            @relation(fields: [groupId], references: [id])
  messages  Message[]
  roles     RolesOnMembers[]
  invites   Invite[]
  createdAt DateTime         @default(now())
}

model Role {
  id        Int              @id @default(autoincrement())
  groupId   Int
  group     Group            @relation(fields: [groupId], references: [id])
  createdAt DateTime         @default(now())
  members   RolesOnMembers[]
}

model RolesOnMembers {
  member     Member   @relation(fields: [memberId], references: [id])
  memberId   Int
  role       Role     @relation(fields: [roleId], references: [id])
  roleId     Int
  assignedAt DateTime @default(now())
  // assignedBy String

  @@id([memberId, roleId])
}

model Channel {
  id             Int         @id @default(autoincrement())
  name           String      @default("general")
  firstMessageId Int?
  lastMessageId  Int?
  // position    Int show in ui
  type           ChannelType @default(TEXT)
  description    String?
  groupId        Int
  group          Group       @relation(fields: [groupId], references: [id])
  messages       Message[]
  createdAt      DateTime    @default(now())
}

model Message {
  id        Int      @id @default(autoincrement())
  content   String?
  image     String?
  ChannelId Int
  Channel   Channel  @relation(fields: [ChannelId], references: [id])
  memberId  Int
  member    Member   @relation(fields: [memberId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Invite {
  id                Int      @id @default(autoincrement())
  uses              Int      @default(0)
  maxUses           Int      @default(1)
  createdByMemberId Int
  createdByMember   Member   @relation(fields: [createdByMemberId], references: [id])
  // expireDate DateTime
  groupId           Int
  group             Group    @relation(fields: [groupId], references: [id])
  createdAt         DateTime @default(now())
}

// enum FriendshipType {
//   FRIEND: 1
//   OUTGOING: 2
//   INCOMING: 3
//   CANCEL: 4
//   BLOCK: 5
// }

enum ChannelType {
  TEXT
  VOICE
}
